#!/usr/bin/env bash

# ============================================================================================ #
#: Title           : HistLog                                                                   #
#: Sypnosis        : HistLog                                                                   #
#: Date Created    : Sun Jul 27 18:07:40 PHT 2014 / Sun Jul 27 10:08:00 UTC 2014               #
#: Last Edit       : Thu Jan 29 21:33:32 PHT 2015 / Thu Jan 29 13:33:32 UTC 2015               #
#: License         : GPLv3                                                                     #
#: Version         : 3.0.2                                                                     #
#: Author          : Jason V. Ferrer '<jetchisel@opensuse.org>'                                #
#: Description     : Logs ~/.bash_history to ~/.bash_history.archive  after 10000 lines.       #
#: Options         : NONE                                                                      #
#: Home Page       : NONE                                                                      #
#: ExtComm         : ed,grep,wc                                                                #
# ============================================================================================ #

# *********************************************************************************************#
#                                                                                              #
#   Warn and die functions, for exit messages and default status or an optional exit status.   #
#                                                                                              #
# *********************************************************************************************#

warn() {
  printf '%s\n' "${BASH_SOURCE##*/}: error: $*" >&2
}

die() {
  local st=$?
  case $2 in
    *[^0-9]*|'') :;;
    *) st=$2;;
  esac
  warn "$1"
  exit "$st"
}

# ******************************************************************************************** #
#                                                                                              #
#    Log everything to the desired log file. (NOTE: Builtins only on this part to be safe)     #
#                                                                                              #
# ******************************************************************************************** #

Date=$(printf "[%(%h %d %Y %H:%M:%S)T]" -1)
Log=$HOME/.HistLog

exec > >(
  while read -r line; do
    echo "$Date $line" >> "$Log"
  done
) 2>&1

# ******************************************************************************************** #
#                                                                                              #
#     Set the PATH just to be safe and cron will not complain about "command not found".       #
#                                                                                              #
# ******************************************************************************************** #

PATH=/usr/local/bin:/usr/bin:/bin
export PATH

# ******************************************************************************************** #
#                                                                                              #
#          Check for the required app/executable is with in your PATH, exit otherwise.         #
#                                                                                              #
# ******************************************************************************************** #

Missing=()
ExtComm=(ed cron grep wc)
MissingMessage="is either not installed or it is not in your PATH!"
ExitMessage="Please install the following: "

for apps in "${ExtComm[@]}"; do
  if ! type -P "$apps" >/dev/null; then
    echo "$apps $MissingMessage" >&2
    Missing+=("$apps")
  fi
done

(( ! ${#Missing[@]} )) || die "$ExitMessage[${Missing[*]}] exiting now!"

# ******************************************************************************************** #
#                                                                                              #
#          Check for the required app/executable is with in your PATH, exit otherwise.         #
#                                                                                              #
# ******************************************************************************************** #

ArrayCrontabEntry=(
  "* * * * * $BASH_SOURCE"
  "* * * * * sleep 30; $BASH_SOURCE"
)

printf -v CronTabEntry '%s\n' "${ArrayCrontabEntry[@]}"
CronTabEntry=${CronTabEntry%$'\n'}

# ******************************************************************************************** #
#                                                                                              #
#      Make ed the default editor so "crontab -e" will accept ed syntax via a heredoc.         #
#                                                                                              #
# ******************************************************************************************** #

EDITOR=ed
export EDITOR

# ******************************************************************************************** #
#                                                                                              #
#     Function to create an entry in cron (every 30 seconds) using ed and a heredoc.           #
#                                                                                              #
# ******************************************************************************************** #

CreateEntry() {
crontab -e << EOF
a
$CronTabEntry
.
w
q
EOF
}

# ******************************************************************************************** #
#                                                                                              #
#                            Add cron entry if there is none.                                  #
#                                                                                              #
# ******************************************************************************************** #

if ! grep -q "$BASH_SOURCE" < <(crontab -l 2>/dev/null); then
  CreateEntry
fi

# ******************************************************************************************** #
#                                                                                              #
#                   Define bash_history bash_history.archive log file.                         #
#                                                                                              #
# ******************************************************************************************** #

History=${HOME}/.bash_history
Archive=${HOME}/.bash_history.archive

# ******************************************************************************************** #
#                                                                                              #
#   Total lines of bash_history LogFile and the Maximum lines allowed before cut and paste.    #
#                                                                                              #
# ******************************************************************************************** #

History_Lines=$(wc -l < "$History")
Archive_Lines=$(wc -l < "$Archive")
MaxLines=10000

# ******************************************************************************************** #
#                                                                                              #
#  lines to cut from history and lines to be pasted in archive. (Adjust the value if needed).  #
#                                                                                              #
# ******************************************************************************************** #

CutLines=5001
PasteLines=5000

# ******************************************************************************************** #
#                                                                                              #
#  Function to Cut from .bash_history and paste to .bash_history.archive (leave 5,000 lines).  #
#                                                                                              #
# ******************************************************************************************** #

CutAndPaste() {
ed -s "$History" <<EOF
$CutLines,\$d
w
u
1,${PasteLines}d
.- r $Archive
w $Archive
EOF
}

# ******************************************************************************************** #
#                                                                                              #
# If Total_lines is more than 10000, paste to archive and delete the excess from SourceFile.   #
#                                                                                              #
# ******************************************************************************************** #

if (( History_Lines > MaxLines )); then
  History_Lines=$(wc -l < "$History")
  Archive_Lines=$(wc -l < "$Archive")
  printf '%s\n' "$History total lines: $History_Lines" "$Archive total lines: $Archive_Lines"
  printf '%s\n' "Your history is now $History_Lines lines, moving the rest to $Archive"
  CutAndPaste
  History_Lines=$(wc -l < "$History")
  Archive_Lines=$(wc -l < "$Archive")
  printf '%s\n' "$History total lines: $History_Lines" "$Archive total lines: $Archive_Lines"
else
  printf '%s\n' "Your history is only [${History_Lines}] lines. Keep it comming!"
fi

# ******************************************************************************************** #
#                                                                                              #
#                                    Set the exit status.                                      #
#                                                                                              #
# ******************************************************************************************** #

exit 0

# ============================================================================================ #
#                                                                                              #
#                                    >>> END OF SCRIPT <<<                                     #
#                                                                                              #
# ============================================================================================ #
